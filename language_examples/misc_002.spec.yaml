- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FROM: https://raw.githubusercontent.com/biasedbit/BBCyclingLabel/master/BBCyclingLabel/BBCyclingLabel.m'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Copyright 2013 BiasedBit'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Licensed under the Apache License, Version 2.0 (the "License");'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' you may not use this file except in compliance with the License.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' You may obtain a copy of the License at'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' http://www.apache.org/licenses/LICENSE-2.0'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Unless required by applicable law or agreed to in writing, software'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' distributed under the License is distributed on an "AS IS" BASIS,'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' See the License for the specific language governing permissions and'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' limitations under the License.'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '  Created by Bruno de Carvalho -- @biasedbit / http://biasedbit.com'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '  Copyright (c) 2013 BiasedBit. All rights reserved.'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.import
  scopes:
    - punctuation.definition.directive
- source: import
  scopesEnd:
    - keyword.control.directive.import
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: BBCyclingLabel.h
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - meta.section
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma.pragma-mark
  scopes:
    - punctuation.definition.directive
- source: pragma mark
  scopesEnd:
    - keyword.control.directive.pragma.pragma-mark
- source: '- Constants'
  scopes:
    - entity.name.tag.pragma-mark
  scopesEnd:
    - meta.section
    - meta.preprocessor.pragma
- source: NSTimeInterval
  scopes:
    - support.type.cocoa
- source: const
  scopes:
    - storage.modifier
- source: kBBCyclingLabelDefaultTransitionDuration
  scopes:
    - constant.other.variable.mac-classic
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - meta.section
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma.pragma-mark
  scopes:
    - punctuation.definition.directive
- source: pragma mark
  scopesEnd:
    - keyword.control.directive.pragma.pragma-mark
- source: '-'
  scopes:
    - entity.name.tag.pragma-mark
  scopesEnd:
    - meta.section
    - meta.preprocessor.pragma
- source: '@'
  scopesBegin:
    - meta.implementation
    - storage.type
  scopes:
    - punctuation.definition.storage.type
- source: implementation
  scopesEnd:
    - storage.type
- source: BBCyclingLabel
  scopes:
    - entity.name.type
- source: '{'
  scopesBegin:
    - meta.scope.implementation
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: NSUInteger
  scopes:
    - support.type.cocoa.leopard
- source: ' _currentLabelIndex'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: NSArray
  scopes:
    - support.class.cocoa
- source: '*'
  scopes:
    - keyword.operator
- source: ' _labels'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    UILabel'
- source: '*'
  scopes:
    - keyword.operator
- source: ' _currentLabel'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '#'
  scopesBegin:
    - meta.section
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma.pragma-mark
  scopes:
    - punctuation.definition.directive
- source: pragma mark
  scopesEnd:
    - keyword.control.directive.pragma.pragma-mark
- source: Creation
  scopes:
    - entity.name.tag.pragma-mark
  scopesEnd:
    - meta.section
    - meta.preprocessor.pragma
- source: '- '
  scopesBegin:
    - meta.function-with-body
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: instancetype
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.definition.type.end
- source: initWithFrame
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: CGRect
  scopes:
    - support.type.quartz
- source: )
  scopes:
    - punctuation.definition.type.end
- source: frame
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: self
  scopes:
    - variable.language
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: super
  scopes:
    - variable.language
- source: initWithFrame
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: frame
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: self
  scopes:
    - variable.language
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nil
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: setupWithEffect
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: BBCyclingLabelTransitionEffectDefault
- source: andDuration
  scopesBegin:
    - support.function.any-method.name-of-parameter
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method.name-of-parameter
- source: kBBCyclingLabelDefaultTransitionDuration
  scopes:
    - constant.other.variable.mac-classic
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: self
  scopes:
    - variable.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: instancetype
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.definition.type.end
- source: initWithCoder
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSCoder
  scopes:
    - support.class.cocoa
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: coder
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: self
  scopes:
    - variable.language
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: super
  scopes:
    - variable.language
- source: initWithCoder
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: coder
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: self
  scopes:
    - variable.language
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nil
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: setupWithEffect
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: BBCyclingLabelTransitionEffectDefault
- source: andDuration
  scopesBegin:
    - support.function.any-method.name-of-parameter
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method.name-of-parameter
- source: kBBCyclingLabelDefaultTransitionDuration
  scopes:
    - constant.other.variable.mac-classic
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: self
  scopes:
    - variable.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: instancetype
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.definition.type.end
- source: initWithFrame
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: CGRect
  scopes:
    - support.type.quartz
- source: )
  scopes:
    - punctuation.definition.type.end
- source: frame
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.argument-type
- source: andTransitionType
  scopes:
    - entity.name.function.name-of-parameter
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: BBCyclingLabelTransitionEffect
- source: )
  scopes:
    - punctuation.definition.type.end
- source: transitionEffect
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: self
  scopes:
    - variable.language
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: super
  scopes:
    - variable.language
- source: initWithFrame
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: frame
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: self
  scopes:
    - variable.language
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nil
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: setupWithEffect
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: transitionEffect
- source: andDuration
  scopesBegin:
    - support.function.any-method.name-of-parameter
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method.name-of-parameter
- source: kBBCyclingLabelDefaultTransitionDuration
  scopes:
    - constant.other.variable.mac-classic
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: self
  scopes:
    - variable.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.function-with-body
    - meta.block
- source: '#'
  scopesBegin:
    - meta.section
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma.pragma-mark
  scopes:
    - punctuation.definition.directive
- source: pragma mark
  scopesEnd:
    - keyword.control.directive.pragma.pragma-mark
- source: Properties
  scopes:
    - entity.name.tag.pragma-mark
  scopesEnd:
    - meta.section
    - meta.preprocessor.pragma
- source: '- '
  scopesBegin:
    - meta.function-with-body
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setTransitionEffect
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: BBCyclingLabelTransitionEffect
- source: )
  scopes:
    - punctuation.definition.type.end
- source: transitionEffect
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '    _transitionEffect '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' transitionEffect'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: prepareTransitionBlocks
  scopes:
    - meta.function-call
    - support.function.any-method
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: NSString
  scopes:
    - support.class.cocoa
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: text
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: text
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setText
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSString
  scopes:
    - support.class.cocoa
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: text
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: setText
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: 'text '
- source: animated
  scopesBegin:
    - support.function.any-method.name-of-parameter
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method.name-of-parameter
- source: 'YES'
  scopes:
    - constant.language
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: UIFont
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: font
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: font
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setFont
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: UIFont
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: font
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: font
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' font'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: UIColor
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: textColor
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: textColor
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setTextColor
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: UIColor
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: textColor
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: textColor
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' textColor'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: UIColor
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: shadowColor
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: shadowColor
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setShadowColor
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: UIColor
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: shadowColor
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: shadowColor
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' shadowColor'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: CGSize
  scopes:
    - support.type.quartz
- source: )
  scopes:
    - punctuation.definition.type.end
- source: shadowOffset
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: shadowOffset
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setShadowOffset
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: CGSize
  scopes:
    - support.type.quartz
- source: )
  scopes:
    - punctuation.definition.type.end
- source: shadowOffset
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: shadowOffset
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' shadowOffset'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: NSTextAlignment
  scopes:
    - support.type.cocoa
- source: )
  scopes:
    - punctuation.definition.type.end
- source: textAlignment
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: textAlignment
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setTextAlignment
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSTextAlignment
  scopes:
    - support.type.cocoa
- source: )
  scopes:
    - punctuation.definition.type.end
- source: textAlignment
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: textAlignment
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' textAlignment'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: NSLineBreakMode
  scopes:
    - support.type.cocoa
- source: )
  scopes:
    - punctuation.definition.type.end
- source: lineBreakMode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lineBreakMode
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setLineBreakMode
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSLineBreakMode
  scopes:
    - support.type.cocoa
- source: )
  scopes:
    - punctuation.definition.type.end
- source: lineBreakMode
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lineBreakMode
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' lineBreakMode'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: NSInteger
  scopes:
    - support.type.cocoa.leopard
- source: )
  scopes:
    - punctuation.definition.type.end
- source: numberOfLines
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: numberOfLines
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setNumberOfLines
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSInteger
  scopes:
    - support.type.cocoa.leopard
- source: )
  scopes:
    - punctuation.definition.type.end
- source: numberOfLines
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: numberOfLines
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' numberOfLines'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: BOOL
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.definition.type.end
- source: adjustsFontSizeToFitWidth
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: adjustsFontSizeToFitWidth
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setAdjustsFontSizeToFitWidth
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: BOOL
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.definition.type.end
- source: adjustsFontSizeToFitWidth
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: adjustsFontSizeToFitWidth
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' adjustsFontSizeToFitWidth'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: CGFloat
  scopes:
    - support.type.quartz
- source: )
  scopes:
    - punctuation.definition.type.end
- source: minimumScaleFactor
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: minimumScaleFactor
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setMinimumScaleFactor
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: CGFloat
  scopes:
    - support.type.quartz
- source: )
  scopes:
    - punctuation.definition.type.end
- source: minimumScaleFactor
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: minimumScaleFactor
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' minimumScaleFactor'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: UIBaselineAdjustment
- source: )
  scopes:
    - punctuation.definition.type.end
- source: baselineAdjustment
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: baselineAdjustment
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setBaselineAdjustment
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: UIBaselineAdjustment
- source: )
  scopes:
    - punctuation.definition.type.end
- source: baselineAdjustment
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: in
  scopes:
    - keyword.other.in
- source: ' _labels'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: baselineAdjustment
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' baselineAdjustment'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.function-with-body
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '#'
  scopesBegin:
    - meta.section
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma.pragma-mark
  scopes:
    - punctuation.definition.directive
- source: pragma mark
  scopesEnd:
    - keyword.control.directive.pragma.pragma-mark
- source: Interface
  scopes:
    - entity.name.tag.pragma-mark
  scopesEnd:
    - meta.section
    - meta.preprocessor.pragma
- source: '- '
  scopesBegin:
    - meta.function-with-body
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setText
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSString
  scopes:
    - support.class.cocoa
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: text
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.argument-type
- source: animated
  scopes:
    - entity.name.function.name-of-parameter
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: BOOL
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.definition.type.end
- source: animated
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: NSUInteger
  scopes:
    - support.type.cocoa.leopard
- source: ' nextLabelIndex '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: nextLabelIndex
  scopes:
    - meta.function-call
    - support.function.any-method
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    UILabel'
- source: '*'
  scopes:
    - keyword.operator
- source: ' nextLabel '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: '_labels '
- source: objectAtIndex
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: nextLabelIndex
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    UILabel'
- source: '*'
  scopes:
    - keyword.operator
- source: ' previousLabel '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' _currentLabel'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nextLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: text
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' text'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Resetting the label state ensures we can change the transition type without extra code on pre-transition block.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Without it a transition that has no alpha changes would have to ensure alpha = 1 on pre-transition block (as'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' well as with every other possible animatable property)'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: resetLabel
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: nextLabel
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Update both current label index and current label pointer'
  scopesEnd:
    - comment.line.double-slash
- source: '    _currentLabel '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' nextLabel'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    _currentLabelIndex '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' nextLabelIndex'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Prepare the next label before the transition animation'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '_preTransitionBlock '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nil
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _preTransitionBlock
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: nextLabel
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' If no pre-transition block is set, prepare the next label for a cross-fade'
  scopesEnd:
    - comment.line.double-slash
- source: nextLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Unhide the label that''s about to be shown'
  scopesEnd:
    - comment.line.double-slash
- source: nextLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hidden
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'NO'
  scopes:
    - constant.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopesBegin:
    - meta.function-call
  scopes:
    - storage.type.built-in.primitive
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ^
  scopes:
    - keyword.operator
- source: changeBlock
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ^
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Perform the user provided changes'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '_transitionBlock '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nil
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _transitionBlock
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: previousLabel
- source: ','
  scopes:
    - punctuation.separator.delimiter
- source: ' nextLabel'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' If no transition block is set, perform a simple cross-fade'
  scopesEnd:
    - comment.line.double-slash
- source: previousLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: nextLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - punctuation.section.block.end.bracket.curly
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopesBegin:
    - meta.function-call
  scopes:
    - storage.type.built-in.primitive
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ^
  scopes:
    - keyword.operator
- source: completionBlock
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: BOOL
  scopes:
    - storage.type
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ^
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: BOOL
  scopes:
    - storage.type
- source: ' finished'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' TODO this is kind of bugged since all transitions that include affine transforms always return finished'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' as true, even when it doesn''t finish...'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: finished
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: previousLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hidden
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'YES'
  scopes:
    - constant.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: animated
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Animate the transition between both labels'
  scopesEnd:
    - comment.line.double-slash
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: 'UIView '
- source: animateWithDuration
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: '_transitionDuration '
- source: animations
  scopesBegin:
    - support.function.any-method.name-of-parameter
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method.name-of-parameter
- source: 'changeBlock '
- source: completion
  scopesBegin:
    - support.function.any-method.name-of-parameter
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method.name-of-parameter
- source: completionBlock
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: else
  scopes:
    - keyword.control
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: changeBlock
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: completionBlock
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: 'YES'
  scopes:
    - constant.language
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - meta.function-with-body
    - meta.block
    - punctuation.section.block.end.bracket.curly
- source: '#'
  scopesBegin:
    - meta.section
    - meta.preprocessor.pragma
    - keyword.control.directive.pragma.pragma-mark
  scopes:
    - punctuation.definition.directive
- source: pragma mark
  scopesEnd:
    - keyword.control.directive.pragma.pragma-mark
- source: Private helpers
  scopes:
    - entity.name.tag.pragma-mark
  scopesEnd:
    - meta.section
    - meta.preprocessor.pragma
- source: '- '
  scopesBegin:
    - meta.function-with-body
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: setupWithEffect
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: BBCyclingLabelTransitionEffect
- source: )
  scopes:
    - punctuation.definition.type.end
- source: effect
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.argument-type
- source: andDuration
  scopes:
    - entity.name.function.name-of-parameter
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: NSTimeInterval
  scopes:
    - support.type.cocoa
- source: )
  scopes:
    - punctuation.definition.type.end
- source: duration
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: NSUInteger
  scopes:
    - support.type.cocoa.leopard
- source: ' size '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: NSMutableArray
  scopes:
    - support.class.cocoa
- source: '*'
  scopes:
    - keyword.operator
- source: ' labels '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: NSMutableArray
  scopes:
    - support.class.cocoa
- source: arrayWithCapacity
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: size
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: NSUInteger
  scopes:
    - support.type.cocoa.leopard
- source: ' i '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' size'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '        UILabel'
- source: '*'
  scopes:
    - keyword.operator
- source: ' label '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: 'UILabel '
- source: alloc
  scopes:
    - meta.function-call
    - support.function.any-method
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: initWithFrame
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: self
  scopes:
    - variable.language
- source: .bounds
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: self
  scopes:
    - variable.language
- source: addSubview
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: label
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: backgroundColor
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: 'UIColor '
- source: clearColor
  scopes:
    - meta.function-call
    - support.function.any-method
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hidden
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'YES'
  scopes:
    - constant.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: numberOfLines
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: 'labels '
- source: addObject
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: label
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: '    _currentLabelIndex '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    _currentLabel '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: 'labels '
- source: objectAtIndex
  scopesBegin:
    - meta.function-call
    - support.function.any-method
- source: ':'
  scopes:
    - punctuation.separator.arguments
  scopesEnd:
    - support.function.any-method
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.function-call
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    _labels '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' labels'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _currentLabel
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hidden
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'NO'
  scopes:
    - constant.language
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: self
  scopes:
    - variable.language
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transitionEffect
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' effect'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: self
  scopes:
    - variable.language
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transitionDuration
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' duration'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: prepareTransitionBlocks
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '_transitionEffect '
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ' BBCyclingLabelTransitionEffectCustom'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: return
  scopes:
    - keyword.control
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    BBCyclingLabelTransitionEffect type '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' _transitionEffect'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CGFloat
  scopes:
    - support.type.quartz
- source: ' currentHeight '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: self
  scopes:
    - variable.language
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: bounds
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.member
- source: .
- source: height
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: self
  scopes:
    - variable.language
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: preTransitionBlock
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ^
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' labelToEnter'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectFadeIn'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectZoomIn'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transform
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: CGAffineTransformMakeScale
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'BBCyclingLabelTransitionEffectScrollUp '
- source: '|'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectScrollDown'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: CGRect
  scopes:
    - support.type.quartz
- source: ' frame '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectScrollUp'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: frame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: origin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: 'y'
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' currentHeight'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectScrollDown'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: frame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: origin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: 'y'
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '-'
  scopes:
    - keyword.operator
- source: frame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: height
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' frame'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - punctuation.section.block.end.bracket.curly
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: self
  scopes:
    - variable.language
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transitionBlock
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ^
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: ' labelToExit'
- source: ','
  scopes:
    - punctuation.separator.delimiter
- source: ' UILabel'
- source: '*'
  scopes:
    - keyword.operator
- source: ' labelToEnter'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectFadeIn'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectFadeOut'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: labelToExit
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectZoomOut'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: labelToExit
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transform
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: CGAffineTransformMakeScale
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectZoomIn'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transform
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' CGAffineTransformIdentity'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'BBCyclingLabelTransitionEffectScrollUp '
- source: '|'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectScrollDown'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: CGRect
  scopes:
    - support.type.quartz
- source: ' frame '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: labelToExit
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CGRect
  scopes:
    - support.type.quartz
- source: ' enterFrame '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectScrollUp'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: frame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: origin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: 'y'
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '-'
  scopes:
    - keyword.operator
- source: frame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: height
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enterFrame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: origin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: 'y'
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: roundf
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'currentHeight '
- source: /
  scopes:
    - keyword.operator
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: '-'
  scopes:
    - keyword.operator
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: enterFrame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: height
  scopes:
    - variable.other.member
- source: /
  scopes:
    - keyword.operator
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: if
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: '&'
  scopes:
    - keyword.operator
- source: ' BBCyclingLabelTransitionEffectScrollDown'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: frame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: origin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: 'y'
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' currentHeight'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enterFrame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: origin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: 'y'
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: roundf
  scopesBegin:
    - meta.function-call
  scopes:
    - entity.name.function
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'currentHeight '
- source: /
  scopes:
    - keyword.operator
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: '-'
  scopes:
    - keyword.operator
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: enterFrame
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: height
  scopes:
    - variable.other.member
- source: /
  scopes:
    - keyword.operator
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round
  scopesEnd:
    - meta.function-call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: labelToExit
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' frame'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: labelToEnter
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' enterFrame'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopesBegin:
    - punctuation.section.block.end.bracket.curly
- source: '}'
  scopesEnd:
    - punctuation.section.block.end.bracket.curly
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: NSUInteger
  scopes:
    - support.type.cocoa.leopard
- source: )
  scopes:
    - punctuation.definition.type.end
- source: nextLabelIndex
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.function
    - meta.return-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control
- source: (
  scopesBegin:
    - meta.parens.block
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '_currentLabelIndex '
- source: +
  scopes:
    - keyword.operator
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens.block
- source: '%'
  scopes:
    - keyword.operator
- source: '['
  scopesBegin:
    - meta.bracketed
  scopes:
    - punctuation.section.scope.begin
- source: '_labels '
- source: count
  scopes:
    - meta.function-call
    - support.function.any-method
- source: ']'
  scopes:
    - punctuation.section.scope.end
  scopesEnd:
    - meta.bracketed
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '- '
  scopesBegin:
    - meta.function
- source: (
  scopesBegin:
    - meta.return-type
  scopes:
    - punctuation.definition.type.begin
- source: void
  scopes:
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.definition.type.end
- source: resetLabel
  scopes:
    - entity.name.function
  scopesEnd:
    - meta.return-type
- source: ':'
  scopesBegin:
    - meta.argument-type
  scopes:
    - entity.name.function.name-of-parameter
    - punctuation.separator.arguments
- source: (
  scopes:
    - punctuation.definition.type.begin
- source: UILabel
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.definition.type.end
- source: label
  scopes:
    - variable.parameter.function
  scopesEnd:
    - meta.function
    - meta.argument-type
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alpha
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: transform
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' CGAffineTransformIdentity'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: label
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: frame
  scopes:
    - variable.other.member
- source: '='
  scopes:
    - keyword.operator.assignment
- source: self
  scopes:
    - variable.language
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: bounds
  scopes:
    - variable.other.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.scope.implementation
    - meta.function-with-body
    - meta.block
- source: '@'
  scopesBegin:
    - storage.type
  scopes:
    - punctuation.definition.storage.type
- source: end
